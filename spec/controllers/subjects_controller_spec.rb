require 'rails_helper'
require Rails.root.join "spec/concerns/admin_authorizable_examples.rb"
require Rails.root.join "spec/concerns/token_authenticable_examples.rb"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe V1::SubjectsController, type: :controller do

  let(:user) {
    FactoryBot.create(:user)
  }

  let(:admin) {
    FactoryBot.create(:user, admin: :admin)
  }

  # This should return the minimal set of attributes required to create a valid
  # Subject. As you add validations to Subject, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "Name" }
  }

  let(:invalid_attributes) {
    { name: nil }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SubjectsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  it_behaves_like "admin_authorizable"
  it_behaves_like "token_authenticable"

  describe "GET #index" do
    it "returns a success response" do
      subject = Subject.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      subject = Subject.create! valid_attributes
      get :show, params: {id: subject.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      context "with an admin user" do
        it "creates a new Subject" do
          request.headers['Authorization'] = "Bearer #{JwtService.encode({user_id: admin.id})}"
          expect {
            post :create, params: {subject: valid_attributes}, session: valid_session
          }.to change(Subject, :count).by(1)
        end

        it "renders a JSON response with the new subject" do
          request.headers['Authorization'] = "Bearer #{JwtService.encode({user_id: admin.id})}"
          post :create, params: {subject: valid_attributes}, session: valid_session
          expect(response).to have_http_status(:created)
          expect(response.content_type).to eq('application/json')
        end
      end

      context "with a non-admin user" do
        it "renders a JSON response with errors for the subject" do
          request.headers['Authorization'] = "Bearer #{JwtService.encode({user_id: user.id})}"
          post :create, params: {subject: valid_attributes}, session: valid_session
          expect(response).to have_http_status(:forbidden)
          expect(response.content_type).to eq('application/json')
        end
      end

      context "with no user" do
        it "renders a JSON response with errors for the subject" do
          post :create, params: {subject: valid_attributes}, session: valid_session
          expect(response).to have_http_status(:forbidden)
          expect(response.content_type).to eq('application/json')
        end
      end
    end

    context "with invalid params" do
      context "with an admin user" do
        it "renders a JSON response with errors for the new subject" do
          request.headers['Authorization'] = "Bearer #{JwtService.encode({user_id: admin.id})}"
          post :create, params: {subject: invalid_attributes}, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json')
        end
      end

      context "with a non-admin user" do
        it "renders a JSON response with errors for the subject" do
          request.headers['Authorization'] = "Bearer #{JwtService.encode({user_id: user.id})}"
          post :create, params: {subject: valid_attributes}, session: valid_session
          expect(response).to have_http_status(:forbidden)
          expect(response.content_type).to eq('application/json')
        end
      end

      context "with no user" do
        it "renders a JSON response with errors for the subject" do
          post :create, params: {subject: valid_attributes}, session: valid_session
          expect(response).to have_http_status(:forbidden)
          expect(response.content_type).to eq('application/json')
        end
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { name: "New Name" }
      }

      context "with an admin user" do
        it "updates the requested subject" do
          subject = Subject.create! valid_attributes
          request.headers['Authorization'] = "Bearer #{JwtService.encode({user_id: admin.id})}"
          put :update, params: {id: subject.to_param, subject: new_attributes}, session: valid_session
          subject.reload
          expect(subject.name).to eq(new_attributes[:name])
        end

        it "renders a JSON response with the subject" do
          subject = Subject.create! valid_attributes
          request.headers['Authorization'] = "Bearer #{JwtService.encode({user_id: admin.id})}"
          put :update, params: {id: subject.to_param, subject: valid_attributes}, session: valid_session
          expect(response).to have_http_status(:ok)
          expect(response.content_type).to eq('application/json')
        end
      end

      context "with a non-admin user" do
        it "renders a JSON response with errors for the subject" do
          subject = Subject.create! valid_attributes
          request.headers['Authorization'] = "Bearer #{JwtService.encode({user_id: user.id})}"
          put :update, params: {id: subject.to_param, subject: valid_attributes}, session: valid_session
          expect(response).to have_http_status(:forbidden)
          expect(response.content_type).to eq('application/json')
        end
      end

      context "with no user" do
        it "renders a JSON response with errors for the subject" do
          subject = Subject.create! valid_attributes
          put :update, params: {id: subject.to_param, subject: valid_attributes}, session: valid_session
          expect(response).to have_http_status(:forbidden)
          expect(response.content_type).to eq('application/json')
        end
      end
    end

    context "with invalid params" do
      context "with an admin user" do
        it "renders a JSON response with errors for the subject" do
          subject = Subject.create! valid_attributes
          request.headers['Authorization'] = "Bearer #{JwtService.encode({user_id: admin.id})}"
          put :update, params: {id: subject.to_param, subject: invalid_attributes}, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json')
        end
      end

      context "with a non-admin user" do
        it "renders a JSON response with errors for the subject" do
          subject = Subject.create! valid_attributes
          request.headers['Authorization'] = "Bearer #{JwtService.encode({user_id: user.id})}"
          put :update, params: {id: subject.to_param, subject: valid_attributes}, session: valid_session
          expect(response).to have_http_status(:forbidden)
          expect(response.content_type).to eq('application/json')
        end
      end

      context "with no user" do
        it "renders a JSON response with errors for the subject" do
          subject = Subject.create! valid_attributes
          put :update, params: {id: subject.to_param, subject: valid_attributes}, session: valid_session
          expect(response).to have_http_status(:forbidden)
          expect(response.content_type).to eq('application/json')
        end
      end
    end
  end

  describe "DELETE #destroy" do
    context "with an admin user" do
      it "destroys the requested subject" do
        subject = Subject.create! valid_attributes
        request.headers['Authorization'] = "Bearer #{JwtService.encode({user_id: admin.id})}"
        expect {
          delete :destroy, params: {id: subject.to_param}, session: valid_session
        }.to change(Subject, :count).by(-1)
      end
    end

    context "with a non-admin user" do
      it "renders a JSON response with errors for the subject" do
        subject = Subject.create! valid_attributes
        request.headers['Authorization'] = "Bearer #{JwtService.encode({user_id: user.id})}"
        delete :destroy, params: {id: subject.to_param}, session: valid_session
        expect(response).to have_http_status(:forbidden)
        expect(response.content_type).to eq('application/json')
      end
    end

    context "with no user" do
      it "renders a JSON response with errors for the subject" do
        subject = Subject.create! valid_attributes
        delete :destroy, params: {id: subject.to_param}, session: valid_session
        expect(response).to have_http_status(:forbidden)
        expect(response.content_type).to eq('application/json')
      end
    end
  end
end
